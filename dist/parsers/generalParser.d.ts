import { Category } from '../enums.js';
import { Song } from '../resources/generalTypes/song.js';
import { Video } from '../resources/generalTypes/video.js';
import { Playlist } from '../resources/generalTypes/playlist.js';
import { Artist } from '../resources/generalTypes/artist.js';
import type { Album } from '../resources/generalTypes/album.js';
import type { GeneralFull, MusicResponsiveListItemRenderer } from '../resources/etc/rawResultTypes/general/generalFull.js';
import { Unsorted } from '../resources/generalTypes/unsorted.js';
import type { ContinuableResultBlueprint } from '../resources/generalTypes/result.js';
/**
 * Parser to deal with the output generated by the Moosick#search
 *
 * @remarks
 * Do not use this class directly, unless for tests purposes
 * @beta
 */
export declare class GeneralParser {
    /**
     * Parses the search result based on the return results or supplied parameters
     * @param context - The return results from axios
     * @param searchType - The type of search request, if omitted it will be detected from the response
     */
    static parseSearchResult(context: GeneralFull): ContinuableResultBlueprint<Unsorted>;
    static parseSearchResult<T extends Category.VIDEO>(context: GeneralFull, searchType?: T): ContinuableResultBlueprint<Video>;
    static parseSearchResult<T extends Category.SONG>(context: GeneralFull, searchType?: T): ContinuableResultBlueprint<Song>;
    static parseSearchResult<T extends Category.PLAYLIST>(context: GeneralFull, searchType?: T): ContinuableResultBlueprint<Playlist>;
    static parseSearchResult<T extends Category.ARTIST>(context: GeneralFull, searchType?: T): ContinuableResultBlueprint<Artist>;
    static parseSearchResult<T extends Category.ALBUM | Category.EP | Category.SINGLE>(context: GeneralFull, searchType?: T): ContinuableResultBlueprint<Album>;
    static parseSearchResult<T extends Category>(context: GeneralFull, searchType?: T): ContinuableResultBlueprint<Video | Song | Playlist | Artist | Album>;
    /**
     * Only works for video and song
     */
    static musicResponsiveListItemRendererParser(musicResponsiveListItemRenderer: MusicResponsiveListItemRenderer): {
        name: string;
        url: string;
        videoId: string;
    };
}
//# sourceMappingURL=generalParser.d.ts.map