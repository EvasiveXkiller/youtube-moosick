import { __exports as forEach } from '../../../../../_virtual/for-each2.js_commonjs-exports';
export { __exports as default } from '../../../../../_virtual/for-each2.js_commonjs-exports';

Object.defineProperty(forEach, "__esModule", { value: true });
forEach.syncForEach = void 0;
/**
 * A facade that allows `Array.forEach()` to be called as though it were asynchronous.
 *
 * @param array - The array to iterate over
 * @param iterator - The function to call for each item in the array
 * @param done - The function to call when all iterators have completed
 *
 * @internal
 */
function syncForEach(array, iterator, done) {
    if (!Array.isArray(array)) {
        throw new TypeError(`${array} is not an array`);
    }
    for (let item of array) {
        iterator(item, () => {
            // Note: No error-handling here because this is currently only ever called
            // by DirectoryReader, which never passes an `error` parameter to the callback.
            // Instead, DirectoryReader emits an "error" event if an error occurs.
        });
    }
    done();
}
forEach.syncForEach = syncForEach;
//# sourceMappingURL=for-each.js.map
