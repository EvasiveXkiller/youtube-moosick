{"version":3,"file":"stat.js","sources":["../../../../../node_modules/@jsdevtools/readdir-enhanced/lib/stat.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stat = void 0;\nconst call_1 = require(\"./call\");\n/**\n * Retrieves the `Stats` for the given path. If the path is a symbolic link,\n * then the Stats of the symlink's target are returned instead.  If the symlink is broken,\n * then the Stats of the symlink itself are returned.\n *\n * @param fs - Synchronous or Asynchronouse facade for the \"fs\" module\n * @param path - The path to return stats for\n *\n * @internal\n */\nfunction stat(fs, path, callback) {\n    let isSymLink = false;\n    call_1.safeCall(fs.lstat, path, (err, lstats) => {\n        if (err) {\n            // fs.lstat threw an eror\n            return callback(err, undefined);\n        }\n        try {\n            isSymLink = lstats.isSymbolicLink();\n        }\n        catch (err2) {\n            // lstats.isSymbolicLink() threw an error\n            // (probably because fs.lstat returned an invalid result)\n            return callback(err2, undefined);\n        }\n        if (isSymLink) {\n            // Try to resolve the symlink\n            symlinkStat(fs, path, lstats, callback);\n        }\n        else {\n            // It's not a symlink, so return the stats as-is\n            callback(null, lstats);\n        }\n    });\n}\nexports.stat = stat;\n/**\n * Retrieves the `Stats` for the target of the given symlink.\n * If the symlink is broken, then the Stats of the symlink itself are returned.\n *\n * @param fs - Synchronous or Asynchronouse facade for the \"fs\" module\n * @param path - The path of the symlink to return stats for\n * @param lstats - The stats of the symlink\n */\nfunction symlinkStat(fs, path, lstats, callback) {\n    call_1.safeCall(fs.stat, path, (err, stats) => {\n        if (err) {\n            // The symlink is broken, so return the stats for the link itself\n            return callback(null, lstats);\n        }\n        try {\n            // Return the stats for the resolved symlink target,\n            // and override the `isSymbolicLink` method to indicate that it's a symlink\n            stats.isSymbolicLink = () => true;\n        }\n        catch (err2) {\n            // Setting stats.isSymbolicLink threw an error\n            // (probably because fs.stat returned an invalid result)\n            return callback(err2, undefined);\n        }\n        callback(null, stats);\n    });\n}\n//# sourceMappingURL=stat.js.map"],"names":["stat_1","require$$0"],"mappings":";;;;;AACA,MAAM,CAAC,cAAc,CAACA,MAAO,EAAE,YAAY,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;WAClD,GAAG,KAAK,EAAE;AACtB,MAAM,MAAM,GAAGC,IAAiB,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE;AAClC,IAAI,IAAI,SAAS,GAAG,KAAK,CAAC;AAC1B,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,MAAM,KAAK;AACrD,QAAQ,IAAI,GAAG,EAAE;AACjB;AACA,YAAY,OAAO,QAAQ,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAC5C,SAAS;AACT,QAAQ,IAAI;AACZ,YAAY,SAAS,GAAG,MAAM,CAAC,cAAc,EAAE,CAAC;AAChD,SAAS;AACT,QAAQ,OAAO,IAAI,EAAE;AACrB;AACA;AACA,YAAY,OAAO,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC7C,SAAS;AACT,QAAQ,IAAI,SAAS,EAAE;AACvB;AACA,YAAY,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;AACpD,SAAS;AACT,aAAa;AACb;AACA,YAAY,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACnC,SAAS;AACT,KAAK,CAAC,CAAC;AACP,CAAC;WACW,GAAG,IAAI,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE;AACjD,IAAI,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,KAAK,KAAK;AACnD,QAAQ,IAAI,GAAG,EAAE;AACjB;AACA,YAAY,OAAO,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AAC1C,SAAS;AACT,QAAQ,IAAI;AACZ;AACA;AACA,YAAY,KAAK,CAAC,cAAc,GAAG,MAAM,IAAI,CAAC;AAC9C,SAAS;AACT,QAAQ,OAAO,IAAI,EAAE;AACrB;AACA;AACA,YAAY,OAAO,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AAC7C,SAAS;AACT,QAAQ,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC9B,KAAK,CAAC,CAAC;AACP"}