import { a as axios$1 } from '../../../_virtual/axios.js_commonjs-module';
import utils$1 from './utils.js';
import bind$1 from './helpers/bind.js';
import Axios_1 from './core/Axios.js';
import mergeConfig$1 from './core/mergeConfig.js';
import defaults_1 from './defaults.js';
import Cancel_1 from './cancel/Cancel.js';
import CancelToken_1 from './cancel/CancelToken.js';
import isCancel from './cancel/isCancel.js';
import spread from './helpers/spread.js';
import isAxiosError from './helpers/isAxiosError.js';

var utils = utils$1;
var bind = bind$1;
var Axios = Axios_1;
var mergeConfig = mergeConfig$1;
var defaults = defaults_1;

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = Cancel_1;
axios.CancelToken = CancelToken_1;
axios.isCancel = isCancel;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;

// Expose isAxiosError
axios.isAxiosError = isAxiosError;

axios$1.exports = axios;

// Allow use of default import syntax in TypeScript
axios$1.exports.default = axios;
//# sourceMappingURL=axios.js.map
