"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPlaylistParser = void 0;
const objectScan_utility_js_1 = require("../resources/utilities/objectScan.utility.js");
const parsersExtended_js_1 = require("./parsersExtended.js");
const playlistURL_js_1 = require("../resources/resultTypes/playlistURL.js");
const common_js_1 = require("../resources/etc/rawResultTypes/common.js");
const enums_js_1 = require("../enums.js");
/**
 * Parser to deal with the output generated by the Moosick#getPlaylist
 *
 * @remarks
 * Do not use this class directly, unless for tests purposes
 * @internal
 */
class GetPlaylistParser {
    static parsePlaylistURL(context) {
        // Gets the entire flexColumn, and filter those with empty members
        const flexColumn = (0, objectScan_utility_js_1.$$)('.musicResponsiveListItemFlexColumnRenderer')(context)
            .filter((item) => (item.text?.runs != null
            && item.displayPriority === common_js_1.DisplayPriority.HIGH));
        const unprocessedHeader = (0, objectScan_utility_js_1.$$)('.musicDetailHeaderRenderer')(context);
        const allThumbnailRenderers = ((0, objectScan_utility_js_1.$$)('.musicThumbnailRenderer')(context));
        const continuation = ((0, objectScan_utility_js_1.$)('.nextContinuationData')(context));
        const playlistContents = [];
        for (let i = 0; i < flexColumn.length; i += 2) {
            const flexColumnFirstRow = flexColumn[i];
            playlistContents.push({
                trackTitle: (0, objectScan_utility_js_1.$)('.text')(flexColumnFirstRow),
                trackId: (0, objectScan_utility_js_1.$)('.videoId')(flexColumnFirstRow),
                artist: parsersExtended_js_1.ParsersExtended.artistParser(flexColumn[i + 1].text.runs),
                thumbnail: allThumbnailRenderers[Math.floor(i / 2)].thumbnail.thumbnails,
            });
        }
        return playlistURL_js_1.PlaylistURL.from({
            headers: unprocessedHeader.length > 0
                ? GetPlaylistParser.playlistURLHeaderParser(unprocessedHeader)
                : undefined,
            playlistContents,
            continuation,
        });
    }
    /**
     * Parses playlist header data and related information
     * @param header - The header object from the returned axios request
     * @internal
     */
    static playlistURLHeaderParser(header) {
        return playlistURL_js_1.PlaylistHeader.from({
            playlistName: header[0].title.runs[enums_js_1.FlexColumnOffset.ONLYRUN].text,
            owner: header[0].subtitle.runs[2].text,
            createdYear: parseInt(header[0].subtitle.runs[4].text, 10),
            thumbnail: header[0].thumbnail.croppedSquareThumbnailRenderer.thumbnail.thumbnails,
            songCount: parseInt(header[0].secondSubtitle.runs[enums_js_1.FlexColumnOffset.ONLYRUN].text, 10),
            approxRunTime: header[0].secondSubtitle.runs[2].text,
        });
    }
}
exports.GetPlaylistParser = GetPlaylistParser;
//# sourceMappingURL=getPlaylistParser.js.map